<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx"
               xmlns:local="*"
               xmlns:view="com.izerui.view.*"
               pageTitle="redis-explorer"
               creationComplete="creationCompleteHandler(event)"
               minWidth="955" minHeight="600">
    <s:layout>
        <s:VerticalLayout paddingBottom="6"/>
    </s:layout>
    <fx:Style>
        @namespace s "library://ns.adobe.com/flex/spark";
        @namespace mx "library://ns.adobe.com/flex/mx";
        @namespace local "*";
        @namespace view "com.izerui.view.*";

        s|Application {
            fontSize: 12;
        }
    </fx:Style>
    <fx:Metadata>
        [ResourceBundle("redis")]
    </fx:Metadata>
    <fx:Declarations>
        <local:Services/>
        <local:Controller/>
        <!-- 将非可视元素（例如服务、值对象）放在此处 -->
    </fx:Declarations>

    <fx:Script><![CDATA[
        import com.adobe.cairngorm.control.CairngormEventDispatcher;
        import com.izerui.event.GetKeysEvent;
        import com.izerui.event.GetLanguageEvent;
        import com.izerui.support.PopUtils;
        import com.izerui.support.event.DbItemSelectEvent;
        import com.izerui.view.AboutUS;
        import com.izerui.vo.RedisServerConfig;

        import mx.collections.ArrayCollection;
        import mx.events.FlexEvent;
        import mx.events.MenuEvent;

        [Bindable]
        public var server:RedisServerConfig;

        [Bindable]
        public var aboutMe:String = "Copyright © 2014-2015 power by serv";

        [Embed("/images/redis16.png")]
        public const serverImg:Class;

        [Embed("/images/list.png")]
        public const listImg:Class;

        [Embed("/images/help.png")]
        public const helpImg:Class;

        public function isSelectDB():Boolean{
            if(this.server&&this.server.dbIndex>-1){
                return true;
            }
            return false;
        }

        private function redisTree1_dbItemSelectEventHandler(event:DbItemSelectEvent):void {
            server = event.selItem;
            CairngormEventDispatcher.getInstance().dispatchEvent(new GetKeysEvent(event.selItem, function (data:ArrayCollection):void {
                mainGrid.currentState = "listState";
                mainGrid.keyList = data;
            }));

        }

        private function mBar_itemClickHandler(event:MenuEvent):void {
            switch (event.item.data) {
                case "about":
                    PopUtils.popUp(new AboutUS(), false);
                    break;
                case "addServer":
                {
                    redisTree.openServerConfigDialog("add");
                    break;
                }
                case "editServer":
                {
                    redisTree.openServerConfigDialog("edit");
                    break;
                }
                case "removeServer":
                {
                    redisTree.removeServer();
                    break;
                }
                case "english":
                    language("en_US");
                    break;
                case "chinese":
                    language("zh_CN");
                    break;

                default:
                {
                    mainGrid.operateData(event.item.data);
                    break;
                }
            }
        }


        [Bindable]
        private function get menuBarData():ArrayCollection {
            var data:ArrayCollection = new ArrayCollection();
            data.addItem({
                "label": resourceManager.getString("redis", "server"), "icon": "serverImg",
                "children": [
                    {"label": resourceManager.getString("redis", "add"), "data": "addServer"},
                    {"label": resourceManager.getString("redis", "edit"), "data": "editServer"},
                    {"label": resourceManager.getString("redis", "remove"), "data": "removeServer"}
                ]
            });
            data.addItem({
                "label": resourceManager.getString("redis", "data"), "icon": "listImg",
                "children": [
                    {
                        "label": resourceManager.getString("redis", "create"),
                        "children": [
                            {"label": resourceManager.getString("redis", "string"), "data": "createString"},
                            {"label": resourceManager.getString("redis", "list"), "data": "createList"},
                            {"label": resourceManager.getString("redis", "set"), "data": "createSet"},
                            {"label": resourceManager.getString("redis", "zset"), "data": "createZSet"},
                            {"label": resourceManager.getString("redis", "hash"), "data": "createHash"}
                        ]
                    },
                    {"label": resourceManager.getString("redis", "rename"), "data": "rename"},
                    {"label": resourceManager.getString("redis", "delete"), "data": "deleteKey"},
                    {"label": resourceManager.getString("redis", "attr"), "data": "attr"},
                    {"type": "separator"},
                    {"label": resourceManager.getString("redis", "cut"), "data": "cut"},
                    {"label": resourceManager.getString("redis", "copy"), "data": "copy"},
                    {"label": resourceManager.getString("redis", "paste"), "data": "paste"},
                    {"type": "separator"},
                    {"label": resourceManager.getString("redis", "import"), "data": "import"},
                    {"label": resourceManager.getString("redis", "export"), "data": "export"},
                ]
            });
            data.addItem({
                "label": resourceManager.getString("redis", "help"), "icon": "helpImg",
                "children": [
                    {
                        "label": resourceManager.getString("redis", "lang"),
                        "children": [
                            {
                                "label": resourceManager.getString("redis", "english"),
                                "data": "english",
                                "type": "radio",
                                "groupName": "lang",
                                "toggled": resourceManager.localeChain[0] == "en_US"
                            },
                            {
                                "label": resourceManager.getString("redis", "chinese"),
                                "data": "chinese",
                                "type": "radio",
                                "groupName": "lang",
                                "toggled": resourceManager.localeChain[0] == "zh_CN"
                            }
                        ]
                    },
                    {"label": resourceManager.getString("redis", "about"), "data": "about"}
                ]
            });
            return data;
        }

        private function language(lang:String):void {
            resourceManager.localeChain = [lang];
            mBar.dataProvider = menuBarData;
        }

        private function creationCompleteHandler(event:FlexEvent):void {
            CairngormEventDispatcher.getInstance().dispatchEvent(new GetLanguageEvent(function (data:String):void {
                language(data);
            }));
            PopUtils.popUp(new LoginPanel(), true);
        }

        [Bindable]
        public function get endpoint():String{
            var url:String = this.url;
            url = url.substring(0,url.lastIndexOf("/"));
            trace(url);
            url += "/messagebroker/amf";
            return url;
        }

        ]]>
	</fx:Script>

    <s:controlBarContent>
        <mx:Image source="@Embed('/images/redis.png')"/>
        <mx:Label text="redis-explorer" fontSize="32" fontWeight="bold"/>
        <mx:Spacer width="30"/>
        <mx:MenuBar id="mBar" height="32" iconField="icon" labelField="label" itemClick="mBar_itemClickHandler(event)"
                    creationComplete="mBar.dataProvider=menuBarData">
        </mx:MenuBar>
        <s:Spacer width="100%"/>
    </s:controlBarContent>

    <mx:HDividedBox width="100%" height="100%">
        <mx:TabNavigator width="200" height="100%">
            <s:NavigatorContent label="{resourceManager.getString('redis','servers')}"
                                icon="@Embed('/images/redis16.png')" width="100%" height="100%">
                <view:RedisTree width="100%" height="100%" id="redisTree"
                                dbItemSelectEvent="redisTree1_dbItemSelectEventHandler(event)"/>
            </s:NavigatorContent>
        </mx:TabNavigator>


        <mx:TabNavigator width="100%" height="100%">
            <s:NavigatorContent label="{resourceManager.getString('redis','explorer')}"
                                icon="@Embed('/images/list.png')" width="100%" height="100%">
                <view:RedisMain id="mainGrid" width="100%" height="100%">

                </view:RedisMain>
            </s:NavigatorContent>
        </mx:TabNavigator>

    </mx:HDividedBox>
    <s:HGroup width="100%" horizontalAlign="center">
        <s:Label text="{aboutMe}"/>
    </s:HGroup>

</s:Application>
