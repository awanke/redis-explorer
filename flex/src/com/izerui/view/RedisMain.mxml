<?xml version="1.0" encoding="utf-8"?>
<mx:VDividedBox xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="300" xmlns:view="com.izerui.view.*"
                currentState="listState"
        keyDown="keyDownHandler1(event)">
    <fx:Declarations>
        <!-- 将非可视元素（例如服务、值对象）放在此处 -->
    </fx:Declarations>

    <mx:states>
        <s:State name="listState"/>
        <s:State name="infoState"/>
    </mx:states>

    <fx:Script>
		<![CDATA[
        import com.adobe.cairngorm.control.CairngormEventDispatcher;
        import com.izerui.event.DeleteKeyEvent;
        import com.izerui.event.GetKeyEvent;
        import com.izerui.support.AlertUtils;
        import com.izerui.support.PopUtils;
        import com.izerui.support.event.KeyAddEvent;
        import com.izerui.support.event.KeyDataChangeEvent;
        import com.izerui.support.event.KeyRenameEvent;
        import com.izerui.support.event.SearchKeyEvent;
        import com.izerui.vo.Key;

        import mx.collections.ArrayCollection;
        import mx.core.FlexGlobals;
        import mx.events.ListEvent;
        import mx.utils.ObjectUtil;

        private var _keyList:Object;

        //检索的关键字
        private var searchKey:String;
        //检索之前的所有数据
        private var beforeSearchData:ArrayCollection;

        [Bindable]
        public function get keyList():Object {
            return _keyList;
        }

        public function set keyList(value:Object):void {
            _keyList = value;
        }


        protected function gridList_itemClickHandler(event:ListEvent):void {
            if (gridList.selectedIndex == -1) {
                return;
            }
            this.currentState = "infoState";
            var key:Key = Key(gridList.selectedItem);
            key.rowIndex = gridList.selectedIndex;
            tabInfo.key = key;
            tabInfo.label = key.name;
            tabInfo.selectedIndex = 0;
        }

        protected function tabInfo_keyDataChangeEventHandler(event:KeyDataChangeEvent):void {
            CairngormEventDispatcher.getInstance().dispatchEvent(new GetKeyEvent(
                    FlexGlobals.topLevelApplication.server,
                    event.key.name,
                    function (data:Key):void {
                        ArrayCollection(gridList.dataProvider).setItemAt(data, event.key.rowIndex);
                        ArrayCollection(gridList.dataProvider).itemUpdated(data);
                    }
            ));
        }

        public function operateData(data:String):void {
            if (!FlexGlobals.topLevelApplication.isSelectDB()) {
                return;
            }
            switch (data) {
                case "createString":
                    createKey("string");
                    break;
                case "createList":
                    createKey("list");
                    break;
                case "createHash":
                    createKey("hash");
                    break;
                case "createZSet":
                    createKey("zset");
                    break;
                case "createSet":
                    createKey("set");
                    break;
                case "rename":
                    if (gridList.selectedItem == null) {
                        return;
                    }
                    var selKey:Key = gridList.selectedItem as Key;
                    var renameKeyPanel:RenameKey = new RenameKey();
                    renameKeyPanel.key = selKey;
                    renameKeyPanel.addEventListener(KeyRenameEvent.renameKeyEvent, function (event:KeyRenameEvent):void {
                        var dataList:ArrayCollection = (gridList.dataProvider as ArrayCollection);
                        gridList.selectedItem = event.key;
                        dataList.itemUpdated(gridList.selectedItem);
                    });
                    PopUtils.popUp(renameKeyPanel, true);
                    break;
                case "deleteKey":
                    if (gridList.selectedItem == null) {
                        return;
                    }
                    var selKey:Key = gridList.selectedItem as Key;
                    AlertUtils.confirm(resourceManager.getString("redis", "confirmDelete"),
                            resourceManager.getString("redis", "delete"),
                            FlexGlobals.topLevelApplication,
                            function ():void {
                                CairngormEventDispatcher.getInstance().dispatchEvent(
                                        new DeleteKeyEvent(FlexGlobals.topLevelApplication.server, selKey.name, function ():void {
                                            (gridList.dataProvider as ArrayCollection).removeItemAt(gridList.selectedIndex);
                                        })
                                )
                            }
                    );
                    break;
                case "search":
                        if(!beforeSearchData){
                            beforeSearchData = ObjectUtil.clone(gridList.dataProvider) as ArrayCollection;
                        }
                        var panel:SearchPanel = new SearchPanel();
                        panel.dataList = beforeSearchData;
                        panel.searchKey = searchKey;
                        panel.addEventListener(SearchKeyEvent.searchKeyEvent, function(event:SearchKeyEvent):void{
                               gridList.dataProvider = event.filterData;
                               searchKey = event.searchKey;
                        });
                        PopUtils.popUp(panel, false);
                    break;
                default :
                    break;
            }


            function createKey(type:String):void {
                var key:Key = new Key();
                key.type = type;
                var createKey:CreateKey = new CreateKey();
                createKey.key = key;
                createKey.dataList = (gridList.dataProvider as ArrayCollection);
                createKey.addEventListener(KeyAddEvent.addKeyEvent, function (event:KeyAddEvent):void {
                    var dataList:ArrayCollection = (gridList.dataProvider as ArrayCollection);
                    dataList.addItem(event.key);
                    gridList.selectedIndex = dataList.length;
                    gridList.scrollToIndex(dataList.length);
                    gridList.dispatchEvent(new ListEvent(ListEvent.ITEM_CLICK));
                });
                PopUtils.popUp(createKey, true);
            }
        }

        private function keyDownHandler1(event:KeyboardEvent):void {
            if(event.keyCode == Keyboard.DELETE){
                operateData("deleteKey");
            }

            if(event.ctrlKey&&event.keyCode == Keyboard.F){
                operateData("search");
            }
        }
        ]]>
	</fx:Script>

    <view:RedisGridList id="gridList" width="100%" height="55%" dataProvider="@{keyList}"
                        itemClick="gridList_itemClickHandler(event)"/>

    <view:RedisInfoTab id="tabInfo" width="100%" height="45%" minHeight="300" includeIn="infoState"
                       keyDataChangeEvent="tabInfo_keyDataChangeEventHandler(event)">

    </view:RedisInfoTab>

</mx:VDividedBox>
